{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RaTrace documentation Overview Implemented features * GUI for 2D raytracing * Scene creation via Python scripts * Simulation of static scenes, with or without UI * Automated scripts for looped simulations with different scenes * Exact raytracing for analytically described elements (spherical, parabolic, flat surfaces) * Accurate raytracing for segments-based, more \"complex\" elements * \"Fast\" raytrace mode for ordered elements or \"slow\" mode for full raytracing * Wavelength dispersion * Tracking of ray phase information * Export ray information to a text file * Color coding rays: wavelength, rainbow, fixed, intensity-scaling * Support for: * Light sources: point source, diffusing plane source, parallel plane source, laser source, virtual rays, double coherent point source * Glass elements: spherical lens, ideal lens, glass slab, * Mirrors: flat, parabolic, semi-transparent * Surfaces: black absorber, diffuse scattering plane * Targets: display surface, imager To be implemented features * Lenses: plano-convex lens, aspherical lens * Glass elements: prism, biprism, microlens array * Mirrors: spherical mirror * Light source: B/W image source * Internal & total reflections * Better error handling when there is a bug in the scene * Diffusely scattering sphere * A library of glass materials * Glass dispersion described with Abbe numbers * Multi-node surfaces instead of simple lines * Show a list of elements (properties) in the UI * Edit elements in the UI itself Known bugs * First screenshot in looped gui does not set the axis correctly * Warning concerning colors * Contact surfaces (e.g. lens doublet) not working * Crash when selecting an intensity plot in the display tab, when no imager is present * Many others ...","title":"Home"},{"location":"#ratrace-documentation","text":"","title":"RaTrace documentation"},{"location":"#overview","text":"Implemented features * GUI for 2D raytracing * Scene creation via Python scripts * Simulation of static scenes, with or without UI * Automated scripts for looped simulations with different scenes * Exact raytracing for analytically described elements (spherical, parabolic, flat surfaces) * Accurate raytracing for segments-based, more \"complex\" elements * \"Fast\" raytrace mode for ordered elements or \"slow\" mode for full raytracing * Wavelength dispersion * Tracking of ray phase information * Export ray information to a text file * Color coding rays: wavelength, rainbow, fixed, intensity-scaling * Support for: * Light sources: point source, diffusing plane source, parallel plane source, laser source, virtual rays, double coherent point source * Glass elements: spherical lens, ideal lens, glass slab, * Mirrors: flat, parabolic, semi-transparent * Surfaces: black absorber, diffuse scattering plane * Targets: display surface, imager To be implemented features * Lenses: plano-convex lens, aspherical lens * Glass elements: prism, biprism, microlens array * Mirrors: spherical mirror * Light source: B/W image source * Internal & total reflections * Better error handling when there is a bug in the scene * Diffusely scattering sphere * A library of glass materials * Glass dispersion described with Abbe numbers * Multi-node surfaces instead of simple lines * Show a list of elements (properties) in the UI * Edit elements in the UI itself Known bugs * First screenshot in looped gui does not set the axis correctly * Warning concerning colors * Contact surfaces (e.g. lens doublet) not working * Crash when selecting an intensity plot in the display tab, when no imager is present * Many others ...","title":"Overview"},{"location":"GUI/","text":"Examples","title":"GUI"},{"location":"GUI/#examples","text":"","title":"Examples"},{"location":"examples/","text":"Examples Examples 1 Examples 2","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#examples-1","text":"","title":"Examples 1"},{"location":"examples/#examples-2","text":"","title":"Examples 2"},{"location":"syntax/","text":"Syntax","title":"Syntax"},{"location":"syntax/#syntax","text":"","title":"Syntax"},{"location":"usage/","text":"Usage Just download the files, and run one of the \"main_XXX.py\" files There are 4 ways to run RaTrace: * The primary way to use RaTrace is with the GUI. This way most of the settings can be changed, and new scenes can be loaded: python main_GUI.py * With a GUI but automated and the possibility for taking screenshots. The program is closed when finished. python main_GUI_in_loop.py * Without GUI, the program finishes when finished. python main_noGUI.py * Without GUI but automated, the program finishes when finished. python main_noGUI_in_loop.py When using the primary way-of-use via the GUI, the scene that is loaded is described in the config.ini file. Also, most of the options that are available in the GUI can also be set in the same config.ini file. [scenes] scene_file = scene.py scenes_folder = D:/RaTrace/scenes load_scene_at_startup = 1 start_simulation_after_loading_scene = 1 reset_axis_after_loading_scene = 0 [simulation] nr_of_rays = 1000 use_phase_information = 1 generate_reflected_rays = 0 items_are_ordered = 0 export_folder = ../ add_timestamp_to_export_file = 1 exit_after_run = 1 [view] show_axis_and_grid = 1 black_background = 0 nr_of_rays_to_plot = 100 show_elements_properties = 0 intensity_coded_colors = 0 show_pixels = 0 intensity_scaler = 0.1 show_noncolliding_rays = 1 splash_screen_transition = 0 The scenes itself are written in Python and are dynamically loaded whenever a new scene is loaded. See the next chapter for examples.","title":"Usage"},{"location":"usage/#usage","text":"Just download the files, and run one of the \"main_XXX.py\" files There are 4 ways to run RaTrace: * The primary way to use RaTrace is with the GUI. This way most of the settings can be changed, and new scenes can be loaded: python main_GUI.py * With a GUI but automated and the possibility for taking screenshots. The program is closed when finished. python main_GUI_in_loop.py * Without GUI, the program finishes when finished. python main_noGUI.py * Without GUI but automated, the program finishes when finished. python main_noGUI_in_loop.py When using the primary way-of-use via the GUI, the scene that is loaded is described in the config.ini file. Also, most of the options that are available in the GUI can also be set in the same config.ini file. [scenes] scene_file = scene.py scenes_folder = D:/RaTrace/scenes load_scene_at_startup = 1 start_simulation_after_loading_scene = 1 reset_axis_after_loading_scene = 0 [simulation] nr_of_rays = 1000 use_phase_information = 1 generate_reflected_rays = 0 items_are_ordered = 0 export_folder = ../ add_timestamp_to_export_file = 1 exit_after_run = 1 [view] show_axis_and_grid = 1 black_background = 0 nr_of_rays_to_plot = 100 show_elements_properties = 0 intensity_coded_colors = 0 show_pixels = 0 intensity_scaler = 0.1 show_noncolliding_rays = 1 splash_screen_transition = 0 The scenes itself are written in Python and are dynamically loaded whenever a new scene is loaded. See the next chapter for examples.","title":"Usage"}]}